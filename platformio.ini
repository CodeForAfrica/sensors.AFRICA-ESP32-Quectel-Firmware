; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = .

;  -DDEBUG_ESP_PORT=Serial
;  -DDEBUG_ESP_WIFI
;  -D PIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK221

[common]
build_flags =
  -DVTABLES_IN_FLASH -D BEARSSL_SSL_BASIC
  -D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH
  -D HTTPCLIENT_1_1_COMPATIBLE=0
  -DNDEBUG
  -Wl,-Teagle.flash.4m3m.ld

build_flags_esp32 =
  -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
  -DVTABLES_IN_FLASH -DBEARSSL_SSL_BASIC
build_flags_esp32_release = ${common.build_flags_esp32} -DNDEBUG
build_flags_esp32_debug = ${common.build_flags_esp32} -g -Og -fno-inline -DUSING_JTAG_DEBUGGER_PINS=1 -DDEBUG_ESP_PORT=Serial

board_build.f_cpu = 160000000L
; Always depend on specific library versions (wherever possible and only for external libraries)
; Keep Library names in the order of their dependencies (leaves at the top)
; ESP8266WiFi in both cases is necessary to solve a case sensitivity issue with WiFiUdp.h
; Use library ID numbers instead of names for libraries whose names are not unique
;   (like OneWire, LiquidCrystal_I2C and TinyGPSPlus)

lib_deps_generic_external =
  1@2.3.4 ; OneWire
  576@1.1.4 ; LiquidCrystal_I2C
;   Adafruit BMP085 Library@1.0.1
;   Adafruit HTU21DF Library@1.1.2
;   Adafruit SHT31 Library@2.2.2
  ArduinoJson@6.13.0
;   DallasTemperature@3.8.0
;   ThingPulse/ESP8266 and ESP32 OLED driver for SSD1306 displays @ ^4.2.1
;   1655@1.0.2 ; TinyGPSPlus, formerly this was referenced as mikalhart/TinyGPSPlus#v0.95
  797@1.0.1 ; TinyWireM
  https://github.com/CodeForAfrica/sensors.AFRICA-Adafruit_FONA.git ; sensors.AFRICA FONA library

; system libraries from platform -> no version number
lib_deps_esp8266_platform =
  Hash
;   Wire
;   ESP8266WiFi
;   DNSServer
;   ESP8266HTTPClient
;   ESP8266WebServer
;   ESP8266mDNS
  EspSoftwareSerial

; system libraries from platform -> no version number
lib_deps_esp32_platform =
  Wire
;   WiFi
;   DNSServer
;   WiFiClientSecure
;   HTTPClient
;   FS
;   SPIFFS
;   WebServer
;   Update
;   ESPmDNS
  EspSoftwareSerial


lib_deps_esp8266 = ${common.lib_deps_esp8266_platform} ${common.lib_deps_generic_external}
lib_deps_esp32 = ${common.lib_deps_esp32_platform} ${common.lib_deps_generic_external}
platform_version = espressif8266@2.6.3

[DISABLEDenv:nodemcuv2]
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
check_tool = clangtidy
check_flags =
  clangtidy: --checks=-*,cert-*,bugprone-*,clang-analyzer-*,hicpp-*,modernize-*,performance-*,portability-*,-readability-*
board_build.f_cpu = ${common.board_build.f_cpu}
build_flags = ${common.build_flags} -DINTL_DE
lib_deps = ${common.lib_deps_esp8266}

[env:4d_systems_esp32s3_gen4_r8n16]
platform = espressif32
board = 4d_systems_esp32s3_gen4_r8n16
framework = arduino
; change microcontroller
; board_build.mcu = esp32s3

; change MCU frequency
board_build.f_cpu = 240000000L
board_upload.maximum_ram_size = 8388608
; build_flags = ${common.build_flags_esp32_release} '-DINTL_EN' '-DESP32_WROOM_MODULE'
lib_deps = ${common.lib_deps_esp32}
monitor_filters = esp32_exception_decoder

